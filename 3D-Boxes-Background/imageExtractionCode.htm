<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tesseract.js/0.1.1/tesseract.min.js" integrity="sha512-D+1Mtte2dgKBw66/cLDj0gF4p2dRkeanSdtAGjSecXF9Rpvy5qvGa1cQt3d7eT1rH4H/1seSuXIcb+hacH7osQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tesseract.js/0.1.1/worker.min.js" integrity="sha512-kQO8h4T5h3Bo1g2S5lgOPXijROR7o69wWTzqG//4eA3sNHVq4xgsDtKVDftjPwm8BDq4OxHxM8BbvzpwUjShJg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<!-- ... (previous HTML code) ... -->

<body>
    <input type="file" id="fileInput" accept=".pdf, .doc, .docx, .txt">
    <div id="photographContainer"></div>
    <button id="submitButton">Submit</button>
    <script>
        // script.js
        const fileInput = document.getElementById('fileInput');
        const photographContainer = document.getElementById('photographContainer');

        fileInput.addEventListener('click', handleFileUpload);

        function handleFileUpload(event) {
            const file = event.target.files[0];

            if (file) {
                if (file.type === 'application/pdf' || file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || file.type === 'text/plain') {
                    // Check for supported document types (PDF, DOC, DOCX, TXT)
                    extractPhotographs(file);
                } else {
                    alert('Unsupported file format. Please upload a PDF, DOC, DOCX, or TXT document.');
                }
            }
        }

        async function extractPhotographs(file) {
            // Perform OCR using Tesseract.js
            const { data } = await Tesseract.recognize(file);

            // Define criteria to identify photographs (e.g., image width and height)
            const photographs = data.words.filter(word => {
                const width = word.bbox.x1 - word.bbox.x0;
                const height = word.bbox.y1 - word.bbox.y0;
                return width > 50 && height > 50; // Adjust these values as needed
            });

            // Display extracted photographs
            displayPhotographs(photographs);
        }

        function displayPhotographs(photographs) {
            photographContainer.innerHTML = ''; // Clear previous results

            photographs.forEach((photo, index) => {
                const img = new Image();
                img.src = `data:image/png;base64,${photo.imageData}`;
                img.alt = `Photograph ${index + 1}`;
                photographContainer.appendChild(img);
            });
        }
    </script>
</body>

</html>